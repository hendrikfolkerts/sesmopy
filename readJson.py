# -*- coding: utf-8 -*-

__author__ = 'Hendrik Folkerts'

import json

class readJson():
    def fromJSON(self, jsonstr):
        try:
            jsonstrsplit = jsonstr.split("\n")
            if jsonstrsplit[0] == "SES JSON Version 1 - DO NOT EDIT THIS FILE MANUALLY!":
                nodelist = json.loads(jsonstrsplit[4])
                sespes = json.loads(jsonstrsplit[5])
                return (True, nodelist, sespes)
            else:
                return (False, [], [])
        except:
            return (False, [], [])

    def readFPES(self, nodelist):
        objects = []    #a list with [nodename, mb-attribute, [[otherAttribute1Name, otherAttribute1Value], [otherAttribute2Name, otherAttribute2Value]]]
        couplings = []  #a list of the coupling relations

        #apply the couplings -> they are in the node with the depth '1'
        #apply the leaf nodes -> they have the depth '2'
        #apply the attributes -> of leaf nodes (depth '2')
        #The depth is the last field of the nodes in the nodelist
        nodesWithOutMbAttribute = {}    #nodes without MB-attribute might contain information on the simulation in their attributes -> dictionary: key is name, value is list of attributes
        for nd in nodelist:
            #nd[12] is the depth
            # from the node with the depth 1, take the couplings
            if nd[12] == '1':
                #couplings
                for cp in nd[8]:
                    #delete the last two fields (are there for a function and a comment)
                    del cp[7]
                    del cp[6]
                    #delete the uid fields
                    del cp[4]
                    del cp[1]
                    #append to couplinglist
                    couplings.append(cp)
            # the nodes with depth 2 refer to the basic models, get nodenames and attributes
            elif nd[12] == '2':
                #name of the leaf node
                name = nd[2]
                #attributes of the leaf node
                #extract the mb-attribute
                mbAtr = ""
                for atr in range(len(nd[6])):
                    if nd[6][atr][0].lower() == "mb":
                        #remove the additional ' or "
                        if nd[6][atr][1][0] in ["'", '"']:
                            nd[6][atr][1] = nd[6][atr][1][1:-1]
                        #set the mb-attribute
                        mbAtr = nd[6][atr][1]
                        #delete the attribute with the name mb from the node's attributelist
                        del nd[6][atr]
                        break
                #other attributes
                for atr in range(len(nd[6])):
                    #remove the additional ' or "
                    if nd[6][atr][1][0] in ["'", '"']:
                        nd[6][atr][1] = nd[6][atr][1][1:-1]
                    #delete the last two fields indicating it is an SESvar or SESfun and the commentfield
                    del nd[6][atr][3]
                    del nd[6][atr][2]
                #collect in objects (update the objects dictionary)
                if mbAtr != "":
                    objects.append([name, mbAtr, nd[6]])
                else:
                    nodesWithOutMbAttribute.update({name: nd[6]})

        return objects, couplings, nodesWithOutMbAttribute